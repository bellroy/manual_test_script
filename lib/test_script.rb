# Autogenerated from a Treetop grammar. Edits may be lost.


module TestScript
  include Treetop::Runtime

  def root
    @root ||= :root
  end

  module Root0
    def name
      elements[1]
    end

    def empty1
      elements[2]
    end

    def tests_a
      elements[5]
    end

    def empty2
      elements[6]
    end
  end

  module Root1
    def empty
      elements[0]
    end

    def test
      elements[1]
    end
  end

  def _nt_root
    start_index = index
    if node_cache[:root].has_key?(index)
      cached = node_cache[:root][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    r1 = _nt_empty
    s0 << r1
    if r1
      s2, i2 = [], index
      loop do
        i3, s3 = index, []
        if has_terminal?("- ", false, index)
          r4 = instantiate_node(SyntaxNode,input, index...(index + 2))
          @index += 2
        else
          terminal_parse_failure("- ")
          r4 = nil
        end
        s3 << r4
        if r4
          r5 = _nt_name
          s3 << r5
          if r5
            r6 = _nt_empty
            s3 << r6
            if r6
              s7, i7 = [], index
              loop do
                if has_terminal?("-", false, index)
                  r8 = instantiate_node(SyntaxNode,input, index...(index + 1))
                  @index += 1
                else
                  terminal_parse_failure("-")
                  r8 = nil
                end
                if r8
                  s7 << r8
                else
                  break
                end
              end
              if s7.empty?
                @index = i7
                r7 = nil
              else
                r7 = instantiate_node(SyntaxNode,input, i7...index, s7)
              end
              s3 << r7
              if r7
                if has_terminal?("\n", false, index)
                  r9 = instantiate_node(SyntaxNode,input, index...(index + 1))
                  @index += 1
                else
                  terminal_parse_failure("\n")
                  r9 = nil
                end
                s3 << r9
                if r9
                  r10 = _nt_tests_a
                  s3 << r10
                  if r10
                    r11 = _nt_empty
                    s3 << r11
                  end
                end
              end
            end
          end
        end
        if s3.last
          r3 = instantiate_node(SyntaxNode,input, i3...index, s3)
          r3.extend(Root0)
        else
          @index = i3
          r3 = nil
        end
        if r3
          s2 << r3
        else
          break
        end
      end
      r2 = instantiate_node(SyntaxNode,input, i2...index, s2)
      s0 << r2
    end
    if s0.last
      r0 = instantiate_node(TestsNode,input, i0...index, s0)
      r0.extend(Root1)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:root][start_index] = r0

    r0
  end

  module TestsA0
    def name
      elements[0]
    end

    def tests_b
      elements[2]
    end
  end

  module TestsA1
    def empty
      elements[0]
    end

    def test
      elements[1]
    end
  end

  def _nt_tests_a
    start_index = index
    if node_cache[:tests_a].has_key?(index)
      cached = node_cache[:tests_a][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    r1 = _nt_empty
    s0 << r1
    if r1
      s2, i2 = [], index
      loop do
        i3, s3 = index, []
        r4 = _nt_name
        s3 << r4
        if r4
          if has_terminal?("\n", false, index)
            r5 = instantiate_node(SyntaxNode,input, index...(index + 1))
            @index += 1
          else
            terminal_parse_failure("\n")
            r5 = nil
          end
          s3 << r5
          if r5
            r6 = _nt_tests_b
            s3 << r6
          end
        end
        if s3.last
          r3 = instantiate_node(SyntaxNode,input, i3...index, s3)
          r3.extend(TestsA0)
        else
          @index = i3
          r3 = nil
        end
        if r3
          s2 << r3
        else
          break
        end
      end
      r2 = instantiate_node(SyntaxNode,input, i2...index, s2)
      s0 << r2
    end
    if s0.last
      r0 = instantiate_node(TestsNode,input, i0...index, s0)
      r0.extend(TestsA1)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:tests_a][start_index] = r0

    r0
  end

  module TestsB0
    def name
      elements[1]
    end

    def tests_c
      elements[3]
    end
  end

  module TestsB1
    def empty
      elements[0]
    end

    def test
      elements[1]
    end
  end

  def _nt_tests_b
    start_index = index
    if node_cache[:tests_b].has_key?(index)
      cached = node_cache[:tests_b][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    r1 = _nt_empty
    s0 << r1
    if r1
      s2, i2 = [], index
      loop do
        i3, s3 = index, []
        if has_terminal?("  ", false, index)
          r4 = instantiate_node(SyntaxNode,input, index...(index + 2))
          @index += 2
        else
          terminal_parse_failure("  ")
          r4 = nil
        end
        s3 << r4
        if r4
          r5 = _nt_name
          s3 << r5
          if r5
            if has_terminal?("\n", false, index)
              r6 = instantiate_node(SyntaxNode,input, index...(index + 1))
              @index += 1
            else
              terminal_parse_failure("\n")
              r6 = nil
            end
            s3 << r6
            if r6
              r7 = _nt_tests_c
              s3 << r7
            end
          end
        end
        if s3.last
          r3 = instantiate_node(SyntaxNode,input, i3...index, s3)
          r3.extend(TestsB0)
        else
          @index = i3
          r3 = nil
        end
        if r3
          s2 << r3
        else
          break
        end
      end
      r2 = instantiate_node(SyntaxNode,input, i2...index, s2)
      s0 << r2
    end
    if s0.last
      r0 = instantiate_node(TestsNode,input, i0...index, s0)
      r0.extend(TestsB1)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:tests_b][start_index] = r0

    r0
  end

  module TestsC0
    def name
      elements[1]
    end

  end

  module TestsC1
    def empty
      elements[0]
    end

    def test
      elements[1]
    end
  end

  module TestsC2
    def collect
      test.elements.map { |t| t.name.text_value }
    end
  end

  def _nt_tests_c
    start_index = index
    if node_cache[:tests_c].has_key?(index)
      cached = node_cache[:tests_c][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    r1 = _nt_empty
    s0 << r1
    if r1
      s2, i2 = [], index
      loop do
        i3, s3 = index, []
        if has_terminal?("    ", false, index)
          r4 = instantiate_node(SyntaxNode,input, index...(index + 4))
          @index += 4
        else
          terminal_parse_failure("    ")
          r4 = nil
        end
        s3 << r4
        if r4
          r5 = _nt_name
          s3 << r5
          if r5
            if has_terminal?("\n", false, index)
              r6 = instantiate_node(SyntaxNode,input, index...(index + 1))
              @index += 1
            else
              terminal_parse_failure("\n")
              r6 = nil
            end
            s3 << r6
          end
        end
        if s3.last
          r3 = instantiate_node(SyntaxNode,input, i3...index, s3)
          r3.extend(TestsC0)
        else
          @index = i3
          r3 = nil
        end
        if r3
          s2 << r3
        else
          break
        end
      end
      r2 = instantiate_node(SyntaxNode,input, i2...index, s2)
      s0 << r2
    end
    if s0.last
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
      r0.extend(TestsC1)
      r0.extend(TestsC2)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:tests_c][start_index] = r0

    r0
  end

  module Name0
  end

  def _nt_name
    start_index = index
    if node_cache[:name].has_key?(index)
      cached = node_cache[:name][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    if has_terminal?('\G[a-zA-Z*]', true, index)
      r1 = true
      @index += 1
    else
      r1 = nil
    end
    s0 << r1
    if r1
      s2, i2 = [], index
      loop do
        if has_terminal?('\G[a-zA-Z0-9 ,.&()\'":/$=@<>\\-+_?]', true, index)
          r3 = true
          @index += 1
        else
          r3 = nil
        end
        if r3
          s2 << r3
        else
          break
        end
      end
      r2 = instantiate_node(SyntaxNode,input, i2...index, s2)
      s0 << r2
    end
    if s0.last
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
      r0.extend(Name0)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:name][start_index] = r0

    r0
  end

  def _nt_empty
    start_index = index
    if node_cache[:empty].has_key?(index)
      cached = node_cache[:empty][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    s0, i0 = [], index
    loop do
      if has_terminal?('\G[\\n\\t\\r]', true, index)
        r1 = true
        @index += 1
      else
        r1 = nil
      end
      if r1
        s0 << r1
      else
        break
      end
    end
    r0 = instantiate_node(SyntaxNode,input, i0...index, s0)

    node_cache[:empty][start_index] = r0

    r0
  end

end

class TestScriptParser < Treetop::Runtime::CompiledParser
  include TestScript
end
